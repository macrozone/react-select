require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* eslint react/prop-types: 0 */

'use strict';

var React = require('react');
var Select = require('react-select');

var STATES = require('./data/states');
var id = 0;

function logChange(value) {
	console.log('Select value changed: ' + value);
}

var CountrySelect = React.createClass({
	displayName: 'CountrySelect',

	onClick: function onClick() {
		this.props.onSelect(this.props.value);
	},
	render: function render() {
		var className = this.props.value === this.props.selected ? 'active' : 'link';
		return React.createElement(
			'span',
			{ onClick: this.onClick, className: className },
			this.props.children
		);
	}
});

var StatesField = React.createClass({
	displayName: 'StatesField',

	getDefaultProps: function getDefaultProps() {
		return {
			searchable: true,
			label: 'States:'
		};
	},
	getInitialState: function getInitialState() {
		return {
			country: 'AU',
			disabled: false,
			id: ++id,
			selectValue: 'new-south-wales'
		};
	},
	switchCountry: function switchCountry(newCountry) {
		console.log('Country changed to ' + newCountry);
		this.setState({
			country: newCountry,
			selectValue: null
		});
	},
	updateValue: function updateValue(newValue) {
		logChange('State changed to ' + newValue);
		this.setState({
			selectValue: newValue || null
		});
	},
	focusStateSelect: function focusStateSelect() {
		this.refs.stateSelect.focus();
	},
	toggleDisabled: function toggleDisabled(e) {
		this.setState({ disabled: e.target.checked });
	},
	render: function render() {
		var ops = STATES[this.state.country];
		return React.createElement(
			'div',
			null,
			React.createElement(
				'label',
				null,
				this.props.label
			),
			React.createElement(Select, { ref: 'stateSelect', options: ops, disabled: this.state.disabled, value: this.state.selectValue, onChange: this.updateValue, searchable: this.props.searchable }),
			React.createElement(
				'div',
				{ className: 'switcher' },
				'Country:',
				React.createElement(
					CountrySelect,
					{ value: 'AU', selected: this.state.country, onSelect: this.switchCountry },
					'Australia'
				),
				React.createElement(
					CountrySelect,
					{ value: 'US', selected: this.state.country, onSelect: this.switchCountry },
					'US'
				),
				'  ',
				React.createElement(
					'button',
					{ type: 'button', onClick: this.focusStateSelect },
					'Focus Select'
				),
				'  ',
				React.createElement('input', { type: 'checkbox', checked: this.state.disabled, id: 'disable-states-' + this.state.id, onChange: this.toggleDisabled }),
				React.createElement(
					'label',
					{ htmlFor: 'disable-states-' + this.state.id },
					'Disable'
				)
			)
		);
	}
});

var RemoteSelectField = React.createClass({
	displayName: 'RemoteSelectField',

	loadOptions: function loadOptions(input, callback) {
		input = input.toLowerCase();
		var rtn = {
			options: [{ label: 'One', value: 'one' }, { label: 'Two', value: 'two' }, { label: 'Three', value: 'three' }],
			complete: true
		};
		if (input.slice(0, 1) === 'a') {
			if (input.slice(0, 2) === 'ab') {
				rtn = {
					options: [{ label: 'AB', value: 'ab' }, { label: 'ABC', value: 'abc' }, { label: 'ABCD', value: 'abcd' }],
					complete: true
				};
			} else {
				rtn = {
					options: [{ label: 'A', value: 'a' }, { label: 'AA', value: 'aa' }, { label: 'AB', value: 'ab' }],
					complete: false
				};
			}
		} else if (!input.length) {
			rtn.complete = false;
		}

		setTimeout(function () {
			callback(null, rtn);
		}, 500);
	},
	render: function render() {
		return React.createElement(
			'div',
			null,
			React.createElement(
				'label',
				null,
				this.props.label
			),
			React.createElement(Select, { asyncOptions: this.loadOptions, className: 'remote-example' })
		);
	}
});

var MultiSelectField = React.createClass({
	displayName: 'MultiSelectField',

	getInitialState: function getInitialState() {
		return {
			disabled: false,
			value: []
		};
	},
	handleSelectChange: function handleSelectChange(value, values) {
		logChange('New value:', value, 'Values:', values);
		this.setState({ value: value });
	},
	toggleDisabled: function toggleDisabled(e) {
		this.setState({ 'disabled': e.target.checked });
	},
	render: function render() {
		var ops = [{ label: 'Chocolate', value: 'chocolate' }, { label: 'Vanilla', value: 'vanilla' }, { label: 'Strawberry', value: 'strawberry' }, { label: 'Caramel', value: 'caramel' }, { label: 'Cookies and Cream', value: 'cookiescream' }, { label: 'Peppermint', value: 'peppermint' }];
		return React.createElement(
			'span',
			null,
			React.createElement(
				'div',
				null,
				React.createElement(
					'label',
					null,
					this.props.label
				),
				React.createElement(Select, { multi: true, disabled: this.state.disabled, value: this.state.value, placeholder: 'Select your favourite(s)', options: ops, onChange: this.handleSelectChange })
			),
			React.createElement(
				'div',
				null,
				React.createElement('input', { type: 'checkbox', checked: this.state.disabled, id: 'disable-multiselect', onChange: this.toggleDisabled }),
				React.createElement(
					'label',
					{ htmlFor: 'disable-multiselect' },
					'Disable'
				)
			)
		);
	}
});

var SelectedValuesField = React.createClass({
	displayName: 'SelectedValuesField',

	onLabelClick: function onLabelClick(data, event) {
		console.log(data, event);
	},
	render: function render() {
		var ops = [{ label: 'Chocolate', value: 'chocolate' }, { label: 'Vanilla', value: 'vanilla' }, { label: 'Strawberry', value: 'strawberry' }, { label: 'Caramel', value: 'caramel' }, { label: 'Cookies and Cream', value: 'cookiescream' }, { label: 'Peppermint', value: 'peppermint' }];
		return React.createElement(
			'div',
			null,
			React.createElement(
				'label',
				null,
				this.props.label
			),
			React.createElement(Select, {
				onOptionLabelClick: this.onLabelClick,
				value: 'chocolate,vanilla,strawberry',
				multi: true,
				placeholder: 'Select your favourite(s)',
				options: ops,
				onChange: logChange })
		);
	}
});

var SelectedValuesFieldCreate = React.createClass({
	displayName: 'SelectedValuesFieldCreate',

	onLabelClick: function onLabelClick(data, event) {
		console.log(data, event);
	},
	render: function render() {
		var ops = [{ label: 'First Option', value: 'first' }, { label: 'Second Option', value: 'second' }, { label: 'Third Option', value: 'third' }];
		return React.createElement(
			'div',
			null,
			React.createElement(
				'label',
				null,
				this.props.label
			),
			React.createElement(Select, {
				value: 'first',
				delimiter: ',',
				multi: true,
				allowCreate: true,
				placeholder: 'Select your favourite(s)',
				options: ops,
				onChange: logChange })
		);
	}
});

var CustomRenderField = React.createClass({
	displayName: 'CustomRenderField',

	onLabelClick: function onLabelClick(data, event) {
		console.log(data, event);
	},
	renderOption: function renderOption(option) {
		return React.createElement(
			'span',
			{ style: { color: option.hex } },
			option.label,
			' (',
			option.hex,
			')'
		);
	},
	renderValue: function renderValue(option) {
		return React.createElement(
			'strong',
			{ style: { color: option.hex } },
			option.label
		);
	},
	render: function render() {
		var ops = [{ label: 'Red', value: 'red', hex: '#EC6230' }, { label: 'Green', value: 'green', hex: '#4ED84E' }, { label: 'Blue', value: 'blue', hex: '#6D97E2' }];
		return React.createElement(
			'div',
			null,
			React.createElement(
				'label',
				null,
				this.props.label
			),
			React.createElement(Select, {
				delimiter: ',',
				multi: true,
				allowCreate: true,
				placeholder: 'Select your favourite(s)',
				options: ops,
				optionRenderer: this.renderOption,
				valueRenderer: this.renderValue,
				onChange: logChange })
		);
	}
});

React.render(React.createElement(
	'div',
	null,
	React.createElement(StatesField, null),
	React.createElement(StatesField, { label: 'States (non-searchable):', searchable: false }),
	React.createElement(MultiSelectField, { label: 'Multiselect:' }),
	React.createElement(SelectedValuesField, { label: 'Clickable labels (labels as links):' }),
	React.createElement(SelectedValuesFieldCreate, { label: 'Option Creation (tags mode):' }),
	React.createElement(CustomRenderField, { label: 'Custom rendering for options and values:' }),
	React.createElement(RemoteSelectField, { label: 'Remote Options:' })
), document.getElementById('example'));

},{"./data/states":2,"react":undefined,"react-select":undefined}],2:[function(require,module,exports){
'use strict';

exports.AU = [{ value: 'australian-capital-territory', label: 'Australian Capital Territory' }, { value: 'new-south-wales', label: 'New South Wales' }, { value: 'victoria', label: 'Victoria' }, { value: 'queensland', label: 'Queensland' }, { value: 'western-australia', label: 'Western Australia' }, { value: 'south-australia', label: 'South Australia' }, { value: 'tasmania', label: 'Tasmania' }, { value: 'northern-territory', label: 'Northern Territory' }];

exports.US = [{ value: 'AL', label: 'Alabama', disabled: true }, { value: 'AK', label: 'Alaska' }, { value: 'AS', label: 'American Samoa' }, { value: 'AZ', label: 'Arizona' }, { value: 'AR', label: 'Arkansas' }, { value: 'CA', label: 'California' }, { value: 'CO', label: 'Colorado' }, { value: 'CT', label: 'Connecticut' }, { value: 'DE', label: 'Delaware' }, { value: 'DC', label: 'District Of Columbia' }, { value: 'FM', label: 'Federated States Of Micronesia' }, { value: 'FL', label: 'Florida' }, { value: 'GA', label: 'Georgia' }, { value: 'GU', label: 'Guam' }, { value: 'HI', label: 'Hawaii' }, { value: 'ID', label: 'Idaho' }, { value: 'IL', label: 'Illinois' }, { value: 'IN', label: 'Indiana' }, { value: 'IA', label: 'Iowa' }, { value: 'KS', label: 'Kansas' }, { value: 'KY', label: 'Kentucky' }, { value: 'LA', label: 'Louisiana' }, { value: 'ME', label: 'Maine' }, { value: 'MH', label: 'Marshall Islands' }, { value: 'MD', label: 'Maryland' }, { value: 'MA', label: 'Massachusetts' }, { value: 'MI', label: 'Michigan' }, { value: 'MN', label: 'Minnesota' }, { value: 'MS', label: 'Mississippi' }, { value: 'MO', label: 'Missouri' }, { value: 'MT', label: 'Montana' }, { value: 'NE', label: 'Nebraska' }, { value: 'NV', label: 'Nevada' }, { value: 'NH', label: 'New Hampshire' }, { value: 'NJ', label: 'New Jersey' }, { value: 'NM', label: 'New Mexico' }, { value: 'NY', label: 'New York' }, { value: 'NC', label: 'North Carolina' }, { value: 'ND', label: 'North Dakota' }, { value: 'MP', label: 'Northern Mariana Islands' }, { value: 'OH', label: 'Ohio' }, { value: 'OK', label: 'Oklahoma' }, { value: 'OR', label: 'Oregon' }, { value: 'PW', label: 'Palau' }, { value: 'PA', label: 'Pennsylvania' }, { value: 'PR', label: 'Puerto Rico' }, { value: 'RI', label: 'Rhode Island' }, { value: 'SC', label: 'South Carolina' }, { value: 'SD', label: 'South Dakota' }, { value: 'TN', label: 'Tennessee' }, { value: 'TX', label: 'Texas' }, { value: 'UT', label: 'Utah' }, { value: 'VT', label: 'Vermont' }, { value: 'VI', label: 'Virgin Islands' }, { value: 'VA', label: 'Virginia' }, { value: 'WA', label: 'Washington' }, { value: 'WV', label: 'West Virginia' }, { value: 'WI', label: 'Wisconsin' }, { value: 'WY', label: 'Wyoming' }];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
